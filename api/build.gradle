buildscript {
    repositories {
        maven {
            url 'https://repo.spring.io/release'
        }
        maven {
            url 'http://repo1.maven.org/maven2'
            allowInsecureProtocol = true
        }
        maven {
            url 'https://mirrors.aliyun.com/repository/public/'
        }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:3.3.3'
        classpath 'io.spring.gradle:dependency-management-plugin:1.1.6'
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.todo'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

repositories {
    maven {
        url 'https://repo.spring.io/release'
    }
    maven {
        url 'http://repo1.maven.org/maven2'
        allowInsecureProtocol = true
    }
    maven {
        url 'https://mirrors.aliyun.com/repository/public/'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

/**
 * Task to automatically migrate javax.* imports to jakarta.* equivalents
 * when upgrading legacy Spring Boot 2.x code.
 */
tasks.register('migrateJakarta') {
    group = 'migration'
    description = 'Convert javax.* imports to jakarta.* in Java source files.'

    def sourceDirs = [
        file('src/main/java'),
        file('src/test/java')
    ]

    inputs.files(sourceDirs.collect { dir ->
        fileTree(dir) {
            include '**/*.java'
        }
    })

    doLast {
        sourceDirs.findAll { it.exists() }.each { dir ->
            fileTree(dir) {
                include '**/*.java'
            }.visit { details ->
                if (!details.directory) {
                    def file = details.file
                    def original = file.getText('UTF-8')
                    def updated = original.replaceAll('javax\\.', 'jakarta.')
                    if (original != updated) {
                        file.write(updated, 'UTF-8')
                    }
                }
            }
        }
    }
}

tasks.named('compileJava').configure {
    dependsOn 'migrateJakarta'
}

tasks.named('compileTestJava').configure {
    dependsOn 'migrateJakarta'
}
